<UserControl x:Class="MsBuildTaskExplorer.Views.TaskExplorerView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:vsfx="clr-namespace:Microsoft.VisualStudio.Shell;assembly=Microsoft.VisualStudio.Shell.14.0"
             xmlns:views="clr-namespace:MsBuildTaskExplorer.Views"
             xmlns:viewModels="clr-namespace:MsBuildTaskExplorer.ViewModels"
             mc:Ignorable="d"
             d:DataContext="{d:DesignInstance viewModels:TaskExplorerViewModel}"
             xmlns:e="clr-namespace:EventBinder;assembly=EventBinder"
             d:DesignHeight="300" d:DesignWidth="300"
             Name="MsBuildTaskExplorer"
             Loaded="{e:EventBinding Initialize}"
             Unloaded="{e:EventBinding Unload}">
    <UserControl.Resources>
        <SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrushKey }" Color="{DynamicResource {x:Static vsfx:VsColors.ToolWindowTextKey}}"/>
        <Style TargetType="{x:Type TextBox}">
            <Setter Property="CaretBrush">
                <Setter.Value>
                    <SolidColorBrush Color="{DynamicResource {x:Static vsfx:VsColors.ToolWindowTextKey}}"/>
                </Setter.Value>
            </Setter>
            <Setter Property="Foreground">
                <Setter.Value>
                    <SolidColorBrush Color="{DynamicResource {x:Static vsfx:VsColors.ToolWindowTextKey}}"/>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type HeaderedContentControl}">
            <Setter Property="Foreground">
                <Setter.Value>
                    <SolidColorBrush Color="{DynamicResource {x:Static vsfx:VsColors.ToolWindowTextKey}}"/>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <Border.Style>
                                <Style>
                                    <Style.Triggers>
                                        <Trigger Property="Border.IsMouseOver" Value="True">
                                            <Setter Property="Border.Background">
                                                <Setter.Value>
                                                    <SolidColorBrush Color="Gray" Opacity="0.2"/>
                                                </Setter.Value>
                                            </Setter>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>
                            <Grid Margin="{TemplateBinding Padding}">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Grid>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate TargetType="{x:Type TextBox}" x:Key="HintTextBox">
            <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                <Grid>
                    <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                    <TextBlock x:Name="InternalWatermarkLabel" 
                               Text="{TemplateBinding Tag}" 
                               Visibility="Collapsed" Focusable="False"
                               VerticalAlignment="Top" Margin="16,3,0,0"
                               Background="Transparent">
                        <TextBlock.Style>
                            <Style TargetType="{x:Type TextBlock}">
                                <Setter Property="Foreground">
                                    <Setter.Value>
                                        <SolidColorBrush Color="{DynamicResource {x:Static vsfx:VsColors.GrayTextKey}}"/>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                </Grid>
            </Border>
            <ControlTemplate.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsFocused" Value="False" />
                        <Condition Property="Text" Value="" />
                    </MultiTrigger.Conditions>
                    <MultiTrigger.Setters>
                        <Setter Property="Visibility" TargetName="InternalWatermarkLabel"
                                Value="Visible" />
                    </MultiTrigger.Setters>
                </MultiTrigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="BorderBrush" TargetName="border" Value="#FF7EB4EA"/>
                </Trigger>
                <Trigger Property="IsKeyboardFocused" Value="True">
                    <Setter Property="BorderBrush" TargetName="border" Value="#FF569DE5"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
    </UserControl.Resources>
    <Grid>
        <Grid x:Name="MainControl" Visibility="{Binding MainViewVisibility, Mode=TwoWay}">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition/>
            </Grid.RowDefinitions>
            <ProgressBar x:Name="ProgressBar" Height="1" VerticalAlignment="Top" IsIndeterminate="True"
                         Visibility="{Binding ProgressBarVisibility, Mode=TwoWay}" Background="Transparent" BorderThickness="0" />
            <Grid Grid.Row="0" Margin="12,12,12,0" Height="24">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <TextBox x:Name="FilterTb" Height="{Binding ElementName=RefreshButton, Path=ActualHeight}"
                         Template="{StaticResource HintTextBox}" Tag="FilePath.*|TargetName.+"
                         TextChanged="{e:EventBinding ApplyFilterAsync, {Binding ElementName=FilterTb, Path=Text}}"
                         Grid.Column="0" Padding="16,3,0,0" Text="{Binding Filter, Mode=TwoWay}">
                    <TextBox.Background>
                        <ImageBrush AlignmentX="Left" ImageSource="pack://application:,,,/MsBuildTaskExplorer;component/Resources/Filter.png" Stretch="None"/>
                    </TextBox.Background>
                </TextBox>
                <Button Grid.Column="1" Margin="6,0,0,0" Width="{Binding ElementName=FilterTb, Path=ActualHeight}"
                        Click="{e:EventBinding OpenSettings}">
                    <Image Height="16" Width="16" Source="pack://application:,,,/MsBuildTaskExplorer;component/Resources/SettingsGroup_16x.png" />
                </Button>
            </Grid>
            <TreeView Margin="3,2,6,0" Grid.Row="1" Name="TasksItemsControl" BorderThickness="0" Background="Transparent" Visibility="Visible"
                      ItemsSource="{Binding Tasks}">
                <TreeView.ItemTemplate>
                    <HierarchicalDataTemplate ItemsSource="{Binding Targets}">
                        <TextBlock Margin="0,6" Text="{Binding RelativeFilePath}"/>
                        <HierarchicalDataTemplate.ItemTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal" Margin="-18,0,0,0">
                                    <Button BorderThickness="0" BorderBrush="Transparent" Click="{e:EventBinding Execute}">
                                        <Image Source="pack://application:,,,/MsBuildTaskExplorer;component/Resources/RunTarget.png" />
                                    </Button>
                                    <Button Margin="6,0,0,0" BorderThickness="0" BorderBrush="Transparent" Click="{e:EventBinding PrintAllProps}"
                                            ToolTip="Print All Properties">
                                        <Image Source="pack://application:,,,/MsBuildTaskExplorer;component/Resources/PrintAllProperties.png" />
                                    </Button>
                                    <Button Margin="6,0,0,0" BorderThickness="0" BorderBrush="Transparent" Click="{e:EventBinding Abort}"
                                            ToolTip="Abort">
                                        <Image Source="pack://application:,,,/MsBuildTaskExplorer;component/Resources/AbortTarget.png" />
                                    </Button>
                                    <TextBlock Margin="6,8,0,6" Text="{Binding Target}"></TextBlock>
                                </StackPanel>
                            </DataTemplate>
                        </HierarchicalDataTemplate.ItemTemplate>
                    </HierarchicalDataTemplate>
                </TreeView.ItemTemplate>
                <TreeView.ItemContainerStyle>
                    <Style TargetType="{x:Type TreeViewItem}">
                        <Setter Property="Background" Value="{x:Null}" />
                        <Setter Property="BorderBrush" Value="{x:Null}" />
                        <Setter Property="Focusable" Value="False" />
                        <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
                    </Style>
                </TreeView.ItemContainerStyle>
            </TreeView>
        </Grid>
        <views:SettingsView Visibility="{Binding SettingsViewVisibility, Mode=TwoWay}"
            x:Name="SettingsControl" DataContext="{Binding SettingsViewModel}"/>
    </Grid>
</UserControl>

